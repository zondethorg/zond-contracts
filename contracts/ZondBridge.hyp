// SPDX‑License‑Identifier: MIT
pragma hyperion ^0.0.2;

/// @title  Zond‑side bridge escrow for native ZND
/// @notice Locks ZND, emits proof usable on EVM chain, and
///         releases ZND after a verified burn on the EVM side.
contract ZondBridge {
    // --- immutables & roles ----------------------------------------------
    address public immutable FEE_TREASURY;
    address public immutable RELAYER;     // multisig / MPC

    uint16 public constant FEE_BPS = 25;  // 0.25 %

    // --- events -----------------------------------------------------------
    /// @dev  Emitted when a user locks ZND on Zond.
    event Locked(
        address indexed zondSender,
        string indexed evmRecipient,
        uint256 amountAfterFee,
        uint256 fee,
        bytes32 lockHash          // keccak256(evmRecipient, amountAfterFee, nonce)
    );

    /// @dev  Emitted when ZND is released to a user.
    event Unlocked(
        address indexed zondRecipient,
        uint256 amount,
        bytes32 burnHash          // keccak256(evmSender, amount, nonce)
    );

    // --- storage ----------------------------------------------------------
    mapping(bytes32 => bool) public processedBurn;  // replay‑protection
    uint256 public nonce;                           // unique per lock

    // --- constructor ------------------------------------------------------
    constructor(address _relayer, address _treasury) {
        RELAYER      = _relayer;
        FEE_TREASURY = _treasury;
    }

    // --- modifiers --------------------------------------------------------
    modifier onlyRelayer() { require(msg.sender == RELAYER, "!relayer"); _; }

    // --- core logic -------------------------------------------------------

    /// @notice Lock native ZND and mint wZND on EVM.
    /// @param  evmRecipient  EVM address that will receive wZND.
    function lockZND(string memory evmRecipient) external payable {
        require(msg.value > 0, "amount=0");

        uint256 fee   = (msg.value * FEE_BPS) / 10_000;
        uint256 net   = msg.value - fee;
        uint256 _nonce = ++nonce;

        // forward fee immediately – pull pattern avoids re‑entrancy
        (bool ok,) = FEE_TREASURY.call{value: fee}("");
        require(ok, "fee-xfer-fail");

        bytes32 lockHash = keccak256(abi.encodePacked(
            evmRecipient, net, _nonce
        ));

        emit Locked(msg.sender, evmRecipient, net, fee, lockHash);
    }

    /// @notice Release previously locked ZND after EVM burn proof.
    /// @dev    Called by the RELAYER only.
    /// @param  zondRecipient  Native address that will receive ZND.
    /// @param  amount        Amount to unlock (already fee‑discounted).
    /// @param  burnHash      Hash emitted by EVM‑side bridge.
    function unlockZND(
        address zondRecipient,
        uint256 amount,
        bytes32 burnHash
    )
        external
        onlyRelayer
    {
        require(!processedBurn[burnHash], "burn-already-used");
        processedBurn[burnHash] = true;

        (bool ok,) = zondRecipient.call{value: amount}("");
        require(ok, "unlock-xfer-fail");

        emit Unlocked(zondRecipient, amount, burnHash);
    }

    // --- fallback (receive ZND) ------------------------------------------
    receive() external payable { revert("direct-send-disallowed"); }
}
